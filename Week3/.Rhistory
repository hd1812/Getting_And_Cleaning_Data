?lapply
?split
library(datasets)
data(iris)
data
?iris
str(iris)
mean(iris$Sepal.Length,na.rm=TRUE)
mean(iris$Sepal.Length,na.rm=TRUE)
iris
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
?tapply
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
cylFour<-subset(mtcars,mtcars$cyl==4)
cylEight<-subset(mtcars,mtcars$cyl==8)
cylFour
mean(cylFour$hp)-mean(cylEight$hp)
debug(ls)
ls(asd,fd)
?ls
0
.Ob <- 1
ls(pattern = "O")
?debug
iris
v<-subset(iris,Species==virginica)
v<-subset(iris,iris$Species==virginica)
v<-subset(iris,iris$Species==virginica)
iris
v<-subset(iris,iris$Species==virinica)
v<-subset(iris,iris$Species==virginica)
iris.$Species
iris$Species
iris$Species==virginica
v<-subset(iris,iris$Species=="virginica")
v
mean(v$Sepal.Length)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcar
mtcars
q()
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("installr")
library(installr)
update()
installr()
install.packages("datasets")
install.packages("datasets")
library(datasets)
library(datasets)
hist(airquality$Ozone)
with(airquality,plot(Wind,Ozone))
airquality<-transform(airquality,Month=factor(Month))
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)")
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
legend("topright",pch=1,col=c("blue","red"),legned=c("May","Other Months"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
legend("topright",pch=1,col=c("blue","red"),legned=c("May","Other Months"))
legend("topright",pch=1,col=c("blue","red"),legend=c("May","Other Months"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in NeW York City",pch=20))
model<-lm(Ozone~Wind,airquality)
abline(mode,lwd=2)
abline(model,lwd=2)
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext(â€œOzone and Weather in New York City", outer=TRUE)
mtext("Ozone and Weather in New York City",outer=TRUE)
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
})
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
})
####Base Plotting Demonstration
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
par(mar=c(2,2,2,2))
####Base Plotting Demonstration
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
par(mar=c(2,2,2,2))
install.packages("httr")
install.packages("XML")
library(httr)
library(XML)
?httr
install.packages("httpuv")
library(httpuv)
library(httr)
library(XML)
##Find OAuth settings for github
oauth_endpoints("github")
##After making application, replace key and secret below
myapp <- oauth_app("github",
key = "3cdab49f37411ce420a7",
secret = "15b444271aa808212c43308b858c34882dac3724")
##Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?fromJSON
fromJSON(toJSON(req))
install.pacakges("JSON")
install.packages("JSON")
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
?fromJSON
?fromJSON
install.packages("jsonlite")
utils:::menuInstallPkgs()
ls()
content(req)
req$permissions$pull
q()
setwd("C:/Users/DH/Desktop/Coursera Data Science/Getting_And_Cleaning_Data/Week3")
##Form a data frame
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
##Logicals ands and ors
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
##Dealing iwth missing values
X[which(X$var2 > 8),]
install.packages("plyr")
X$var4 <- rnorm(5)
X
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
##Get useful info
head(restData,n=3)
tail(restData,n=3)
restData <- read.csv("./data/restaurants.csv")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
##Create sequences
s1 <- seq(1,10,by=2) ; s1
s2 <- seq(1,10,length=3); s2
x <- c(1,3,8,25,100); seq(along = x)
##Subsetting variables
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$neighborhood
##Create binary variables
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong,restData$zipCode < 0)
?ifelse
restData$zipWrong
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
##create factor variables
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
##create factor variables
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
##Levels of factor variables
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesnofac = factor(yesno,levels=c("yes","no"))
relevel(yesnofac,ref="no")
as.numeric(yesnofac)
##Cutting produces factor vafriables
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
##Using the mutate function
library(Hmisc); library(plyr)
restData2 = mutate(restData,zipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesnofac = factor(yesno,levels=c("yes","no"))##lowest first
relevel(yesnofac,ref="no")
as.numeric(yesnofac)
##Cutting produces factor vafriables
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
##Using the mutate function
library(Hmisc); library(plyr)
restData2 = mutate(restData,zipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(carMelt,n=3)
tail(carMelt,n=3)
##Casting data frames
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
