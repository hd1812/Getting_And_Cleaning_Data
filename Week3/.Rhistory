?lapply
?split
library(datasets)
data(iris)
data
?iris
str(iris)
mean(iris$Sepal.Length,na.rm=TRUE)
mean(iris$Sepal.Length,na.rm=TRUE)
iris
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
?tapply
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
cylFour<-subset(mtcars,mtcars$cyl==4)
cylEight<-subset(mtcars,mtcars$cyl==8)
cylFour
mean(cylFour$hp)-mean(cylEight$hp)
debug(ls)
ls(asd,fd)
?ls
0
.Ob <- 1
ls(pattern = "O")
?debug
iris
v<-subset(iris,Species==virginica)
v<-subset(iris,iris$Species==virginica)
v<-subset(iris,iris$Species==virginica)
iris
v<-subset(iris,iris$Species==virinica)
v<-subset(iris,iris$Species==virginica)
iris.$Species
iris$Species
iris$Species==virginica
v<-subset(iris,iris$Species=="virginica")
v
mean(v$Sepal.Length)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcar
mtcars
q()
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("installr")
library(installr)
update()
installr()
install.packages("datasets")
install.packages("datasets")
library(datasets)
library(datasets)
hist(airquality$Ozone)
with(airquality,plot(Wind,Ozone))
airquality<-transform(airquality,Month=factor(Month))
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)")
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
legend("topright",pch=1,col=c("blue","red"),legned=c("May","Other Months"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
legend("topright",pch=1,col=c("blue","red"),legned=c("May","Other Months"))
legend("topright",pch=1,col=c("blue","red"),legend=c("May","Other Months"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in NeW York City",pch=20))
model<-lm(Ozone~Wind,airquality)
abline(mode,lwd=2)
abline(model,lwd=2)
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext(â€œOzone and Weather in New York City", outer=TRUE)
mtext("Ozone and Weather in New York City",outer=TRUE)
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
})
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
})
####Base Plotting Demonstration
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
par(mar=c(2,2,2,2))
####Base Plotting Demonstration
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
par(mar=c(2,2,2,2))
install.packages("httr")
install.packages("XML")
library(httr)
library(XML)
?httr
install.packages("httpuv")
library(httpuv)
library(httr)
library(XML)
##Find OAuth settings for github
oauth_endpoints("github")
##After making application, replace key and secret below
myapp <- oauth_app("github",
key = "3cdab49f37411ce420a7",
secret = "15b444271aa808212c43308b858c34882dac3724")
##Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?fromJSON
fromJSON(toJSON(req))
install.pacakges("JSON")
install.packages("JSON")
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
?fromJSON
?fromJSON
install.packages("jsonlite")
utils:::menuInstallPkgs()
ls()
content(req)
req$permissions$pull
q()
setwd("C:/Users/DH/Desktop/Coursera Data Science/Getting_And_Cleaning_Data/Week3")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="./data",method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="./data/data.csv",method="curl")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
if(!file.exists("./datat")){dir.create("./data")}
if(!file.exists("./datat")){dir.create("./data")}
if(!file.exists("./datat")){dir.create("./datat")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./datat/restaurants.csv",method="curl")
restData <- read.csv("./datat/restaurants.csv")
restData <- read.csv("./data/getdata-data-ss06hid.csv")
restData <- read.csv("getdata-data-ss06hid.csv")
restData[(ACR=3&AGS=6)]
restData[(ACR==3&AGS==6)]
str(restData)
restData[(restData$ACR==3&restData$AGS==6)]
restData[(restData$ACR==3&restData$AGS==6),]
restData <- read.csv("getdata-data-ss06hid.csv")
##Q1
restData[(restData$ACR==3&restData$AGS==6),]
str(restData)
restData[which(agricultureLogical==TRUE),]
agricultureLogical<-restData[(restData$ACR==3&restData$AGS==6),]
restData[which(agricultureLogical==TRUE),]
agricultureLogical<-restData[(restData$ACR==3&restData$AGS==6),]
x<-restData[which(agricultureLogical==TRUE),]
head(X)
x<-restData[which(agricultureLogical==TRUE),]
head(X)
agricultureLogical<-restData[(restData$ACR==3&restData$AGS==6),]
x<-restData[which(agricultureLogical==TRUE),]
head(X)
head(x)
str(restData)
restData[restData$ACR==3]
restData[restData$ACR==3,]
restData$RT
restData$ACR
restData$ACR==3
restData[restData$ACR==3]
restData[,restData$ACR==3]
restData[restData$ACR==3,]
head(restData[restData$ACR==3,])
str(restData[restData$ACR==3,])
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
##Logicals ands and ors
X[(X$var1 <= 3 & X$var3 > 11),]
agricultureLogical<-restData[(restData$ACR=3 & restData$AGS=6),]
agricultureLogical<-restData[(restData$ACR==3 & restData$AGS==6),]
agricultureLogical<-restData[(restData$ACR==3 & restData$AGS==6),]
agricultureLogical
agricultureLogical<-[(restData$ACR==3 & restData$AGS==6),]
agricultureLogical<-(restData$ACR==3 & restData$AGS==6)
agricultureLogical
x<-restData[which(agricultureLogical==TRUE),]
head(x)
install.packages("jpeg")
jpeg(filename=":data/getdata-jeff.jpg")
pic<-jpeg(filename="getdata-jeff.jpg")
pic<-jpeg(filename="getdata-jeff.jpg",native=TRUE)
args(jpeg)
args(summary)
args(Summary)
pic<-jpeg(filename="getdata-jeff.jpg")
Summary(pic,native=TRUE)
pic<-jpeg(filename="getdata-jeff.jpg")
quantile(pic,probs=c(0.3,0.8))
pic<-jpeg(filename="getdata-jeff.jpg")
quantile(pic,probs=c(0.3,0.8))
str(pic)
pic
pic<-jpeg(filename="getdata-jeff.jpg",native=TRUE)
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
library(jpeg)
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
quantile(pic,probs=c(0.3,0.8))
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
pic<-readJPEG("getdata-jeff",native=TRUE)
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
pic<-readJPEG(system.file("getdata-jeff.jpg"),native=TRUE)
?readJPEG
pic<-readJPEG(system.file("getdata-jeff.jpeg"),native=TRUE)
pic<-readJPEG("getdata-jeff.jpeg",native=TRUE)
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
restData <- read.csv("getdata-data-ss06hid.csv")
GDP <- read.csv("getdata-data-GDP.csv")
EDU <- read.csv("getdata-data-EDSTATS_Country.csv")
str(GDP)
str(EDU)
table(GDP$X %in% EDU$CountryCode)
table(EDU$CountryCode %in% GDP$X)
str(GDP)
GDP.x
GDP.X
GDP$X
?table
table(EDU$CountryCode %in% GDP$X,useNA = "no")
EDU$CountryCode
GDPCountry<-as.factor(GDP.X)
GDPCountry<-as.factor(GDP$X)
GDPCounry
GDPCountry
GDP <- read.csv("getdata-data-GDP.csv")
EDU <- read.csv("getdata-data-EDSTATS_Country.csv")
GDPCountry<-as.factor(GDP$X)
table(EDU$CountryCode %in% GDP$X,useNA = "no")
sort(GDP,decreasing=TRUE)
GDP
GDP$Gross.domestic.product.2012
x<-sort(GDP$Gross.domestic.product.2012,decreasing=TRUE)
x
x[13+4]
GDP[GDP$Gross.domestic,product.2012==x[13+4],]
GDP[GDP$Gross.domestic.product.2012==x[13+4],]
x
table(EDU$CountryCode %in% GDP$X,useNA[2:4] = "no")
table(EDU$CountryCode %in% GDP$X[2:4],useNA = "no")
table(EDU$CountryCode %in% GDP$X[6:195],useNA = "no")
x<-sort(GDP$Gross.domestic.product.2012[6:195],decreasing=TRUE)
GDP[GDP$Gross.domestic.product.2012==x[13+4],]
GDP[GDP$Gross.domestic.product.2012==x[13],]
x<-sort(GDP$Gross.domestic.product.2012[6:195],decreasing=TRUE)
x
x<-sort(as.numeric(GDP$Gross.domestic.product.2012[6:195]),decreasing=TRUE)
x
GDP[GDP$Gross.domestic.product.2012==x[13],]
GDP[GDP$Gross.domestic.product.2012==as.factor(x[13]),]
x[13]
GDP[GDP$Gross.domestic.product.2012==as.factor(179),]
GDP[GDP$Gross.domestic.product.2012==179,]
GDP[as.numeric(GDP$Gross.domestic.product.2012)==179,]
GDP[as.numeric(GDP$Gross.domestic.product.2012)==x[13],]
GDP[as.numeric(GDP$Gross.domestic.product.2012[6:195])==x[13],]
x[13]
?read.csv
GDP <- read.csv("getdata-data-GDP.csv",blank.lines.skip = TRUE)
GDP
str(GDP)
table(EDU$CountryCode %in% GDP$X[6:195],useNA = "no")
names<-EDU$CountryCode %in% GDP$X[6:195]
names
EDU[nameMatrix,]
nameMatrix<-EDU$CountryCode %in% GDP$X[6:195]
EDU[nameMatrix,]
nameMatrix<-EDU$CountryCode %in% GDP$X[6:195]
str(nameMatrix)
nameMatrix
EDU[nameMatrix,]
str(EDU[nameMatrix,])
commonCountry<-EDU[nameMatrix,]
?download.file
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="wb")
download.file(fileUrl,destfile="./data/restaurants.csv",mode="wb")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl,destfile="jeff.jpg",mode="wb")
restData <- read.csv("jeff.jpg")
library(jpeg)
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
quantile(pic,probs=c(0.3,0.8))
pic<-readJPEG("getdata-jeff.jpg",native=TRUE)
pic<-readJPEG("jeff.jpg",native=TRUE)
quantile(pic,probs=c(0.3,0.8))
