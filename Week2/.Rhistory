q()
install.packages('RMySQL',type='source')
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
install.packages(“RMySQL”)
install.packages("RMySQL")
install.packages("RMySQL")
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
?dbconnect
?dbConnect
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages("gWidgets")
library(gWidgets)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
?dbConnect
library(RMySQL)
install.packages("DBI")
install.packages("DBI")
library(DBI)
liibrary(RMySQL)
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(RMySQL::MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
install.packages("dbConnect")
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
library(dbConnect)
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(RMySQL::MySQL(), user = "genome", host="genome-mysql.cse.ucsc.edu")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
library(rhdf5)
created = h5createFile("example.h5")
created
##Create group
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
setwd("C:/Users/hao.ding/Desktop/Git workspace/Getting_And_Cleaning_Data/Week2")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
##Create HDF file
library(rhdf5)
created = h5createFile("example.h5")
created
##Create group
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
##Write a data set
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
##Writing and reading chunks
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
myapp = oauth_app("twitter",
key="yourConsumerKeyHere",secret="yourConsumerSecretHere")
sig = sign_oauth1.0(myapp,
token = "yourTokenHere",
token_secret = "yourTokenSecretHere")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
